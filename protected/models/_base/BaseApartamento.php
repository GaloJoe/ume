<?php

/**
 * This is the model base class for the table "apartamento".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Apartamento".
 *
 * Columns in table "apartamento" available as properties of the model,
 * followed by relations of table "apartamento" available as properties of the model.
 *
 * @property integer $id
 * @property integer $numero
 * @property string $descricao
 * @property string $metragem
 * @property string $valor
 * @property integer $bloco
 * @property integer $andar
 * @property integer $box_estacionamento
 * @property integer $disponivel
 * @property integer $ativo
 *
 * @property Bloco $bloco0
 */
abstract class BaseApartamento extends GxActiveRecord {

    public $empreendimento;
    
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'apartamento';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Apartamento|Apartamentos', $n);
    }

    public static function representingColumn() {
        return 'numero';
    }

    public function rules() {
        return array(
            array('numero, descricao, metragem, valor, bloco, box_estacionamento, disponivel, ativo', 'required'),
            array('numero, bloco, andar, box_estacionamento, disponivel', 'numerical', 'integerOnly' => true),
            array('valor', 'numerical'),
            array('descricao', 'length', 'max' => 100),
            array('metragem', 'length', 'max' => 20),
            array('id, numero, descricao, metragem, valor, bloco, andar, box_estacionamento, disponivel, ativo', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'historicos' => array(self::HAS_MANY, 'Historico', 'apartamento'),
            'bloco0' => array(self::BELONGS_TO, 'Bloco', 'bloco'),
            'andar0' => array(self::BELONGS_TO, 'Andar', 'andar'),
            'empreendimento0' => array(self::HAS_MANY, 'Empreendimento', array('empreendimento' => 'id'), 'through' => 'bloco0'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'numero' => Yii::t('app', 'Número'),
            'descricao' => Yii::t('app', 'Descrição'),
            'metragem' => Yii::t('app', 'Metragem'),
            'valor' => Yii::t('app', 'Valor'),
            'bloco' => Yii::t('app', 'Bloco'),
            'andar' => Yii::t('app', 'Andar'),
            'box_estacionamento' => Yii::t('app', 'Box Estacionamento'),
            'disponivel' => Yii::t('app', 'Disponível'),
            'ativo' => Yii::t('app', 'Ativo'),
            'bloco0' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('numero', $this->numero);
        $criteria->compare('descricao', $this->descricao, true);
        $criteria->compare('metragem', $this->metragem, true);
        $criteria->compare('valor', $this->valor, true);
        $criteria->compare('bloco', $this->bloco);
        $criteria->compare('andar', $this->andar);
        $criteria->compare('box_estacionamento', $this->box_estacionamento);
        $criteria->compare('disponivel', $this->disponivel);
        $criteria->compare('ativo', $this->ativo);
        
        $criteria->with = array('bloco0', 'empreendimento0');
        
        $criteria->together = true;
        
        $criteria->compare('empreendimento0.id', $this->empreendimento, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort'=>array(
                'defaultOrder'=>'bloco, numero ASC',
            ),
            'pagination'=>array(
                'pageSize' => 400,
            ),
        ));
    }

}
