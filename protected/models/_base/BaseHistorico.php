<?php

/**
 * This is the model base class for the table "historico".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Historico".
 *
 * Columns in table "historico" available as properties of the model,
 * followed by relations of table "historico" available as properties of the model.
 *
 * @property integer $id
 * @property integer $apartamento
 * @property string $data
 * @property string $data_cancelamento
 * @property integer $usuario
 * @property string $status
 * @property integer $em_contratacao
 * @property integer $vendido
 * @property integer $corretor_pago_meia
 * @property integer $corretor_pago
 * @property string $data_pagamento_corretor
 * @property string $data_pagamento_corretor_meia
 * @property double $valor_comissao_corretor
 * @property double $valor_pago_corretor
 * @property integer $adm_vendas_pago
 * @property string $data_aprovacao_financiamento
 * @property string $data_pagamento_adm_vendas
 * @property double $valor_pagamento_adm_vendas
 * @property string $valor_venda
 * @property double $valor_entrada
 * @property double $valor_financiado_construtora
 * @property double $valor_financiado_caixa
 * @property string $cliente_nome
 * @property string $cliente_cpf
 * @property integer $ativo
 *
 * @property Apartamento $apartamento0
 * @property Usuario $usuario0
 */
abstract class BaseHistorico extends GxActiveRecord {

    public $imobiliaria;
    public $bloco;
    public $empreendimento;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'historico';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Relatório|Relatórios', $n);
    }

    public static function representingColumn() {
        return 'data';
    }

    public function rules() {
        return array(
            array('apartamento, usuario, ativo', 'required'),
            array('apartamento, usuario, em_contratacao, vendido, corretor_pago_meia, corretor_pago, adm_vendas_pago, ativo', 'numerical', 'integerOnly' => true),
            array('valor_comissao_corretor, valor_pago_corretor, valor_pagamento_adm_vendas, valor_entrada, valor_financiado_construtora, valor_financiado_caixa', 'numerical'),
            array('status, valor_venda, cliente_cpf', 'length', 'max' => 20),
            array('cliente_nome', 'length', 'max' => 255),
            array('data, data_cancelamento, data_pagamento_corretor, data_pagamento_corretor_meia, data_pagamento_adm_vendas, data_aprovacao_financiamento', 'safe'),
            array('data, data_cancelamento, status, vendido, corretor_pago_meia, corretor_pago, data_pagamento_corretor, data_pagamento_corretor_meia, valor_comissao_corretor, adm_vendas_pago, data_pagamento_adm_vendas, valor_pagamento_adm_vendas, valor_venda, valor_entrada, valor_financiado_construtora, valor_financiado_caixa, cliente_nome, cliente_cpf, data_aprovacao_financiamento', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, apartamento, data, data_cancelamento, data_aprovacao_financiamento, usuario, status, vendido, corretor_pago_meia, corretor_pago, data_pagamento_corretor, data_pagamento_corretor_meia, valor_comissao_corretor, valor_pago_corretor, adm_vendas_pago, data_pagamento_adm_vendas, valor_pagamento_adm_vendas, valor_venda, valor_entrada, valor_financiado_construtora, valor_financiado_caixa, cliente_nome, cliente_cpf, ativo, imobiliaria, bloco, empreendimento', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'apartamento0' => array(self::BELONGS_TO, 'Apartamento', 'apartamento'),
            'usuario0' => array(self::BELONGS_TO, 'Usuario', 'usuario'),
            'imobiliaria0' => array(self::HAS_MANY, 'Imobiliaria', array('imobiliaria' => 'id'), 'through' => 'usuario0'),
            'bloco0' => array(self::HAS_MANY, 'Bloco', array('bloco' => 'id'), 'through' => 'apartamento0'),
            'empreendimento0' => array(self::HAS_MANY, 'Empreendimento', array('empreendimento' => 'id'), 'through' => 'bloco0'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'apartamento' => null,
            'data' => Yii::t('app', 'Data'),
            'data_cancelamento' => Yii::t('app', 'Data Cancelamento'),
            'usuario' => null,
            'status' => Yii::t('app', 'Status'),
            'em_contratacao' => Yii::t('app', 'Em Contratação'),
            'vendido' => Yii::t('app', 'Vendido'),
            'corretor_pago_meia' => Yii::t('app', 'Corretor Pago Meia'),
            'corretor_pago' => Yii::t('app', 'Corretor Pago'),
            'data_pagamento_corretor' => Yii::t('app', 'Data Pagamento Corretor'),
            'data_pagamento_corretor_meia' => Yii::t('app', 'Data Pagamento Corretor Meia'),
            'data_aprovacao_financiamento' => Yii::t('app', 'Data de Aprovação do Financiamento'),
            'valor_comissao_corretor' => Yii::t('app', 'Valor Comissao Corretor'),
            'adm_vendas_pago' => Yii::t('app', 'Adm Vendas Pago'),
            'data_pagamento_adm_vendas' => Yii::t('app', 'Data Pagamento Adm Vendas'),
            'valor_pagamento_adm_vendas' => Yii::t('app', 'Valor Comissão Adm Vendas'),
            'valor_venda' => Yii::t('app', 'Valor Venda'),
            'valor_entrada' => Yii::t('app', 'Valor Entrada'),
            'valor_financiado_construtora' => Yii::t('app', 'Valor Financiado Construtora'),
            'valor_financiado_caixa' => Yii::t('app', 'Valor Financiado Caixa'),
            'cliente_nome' => Yii::t('app', 'Nome do Cliente'),
            'cliente_cpf' => Yii::t('app', 'CPF do Cliente'),
            'ativo' => Yii::t('app', 'Ativo'),
            'apartamento0' => null,
            'usuario0' => null,
            'imobiliaria0' => null,
            'bloco0' => null,
            'empreendimento0' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('apartamento', $this->apartamento);
        $criteria->compare('data', $this->data, true);
        $criteria->compare('data_cancelamento', $this->data_cancelamento, true);
        $criteria->compare('usuario', $this->usuario);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('em_contratacao', $this->em_contratacao);
        $criteria->compare('vendido', $this->vendido);
        $criteria->compare('corretor_pago_meia', $this->corretor_pago_meia);
        $criteria->compare('corretor_pago', $this->corretor_pago);
        $criteria->compare('data_pagamento_corretor', $this->data_pagamento_corretor, true);
        $criteria->compare('data_pagamento_corretor_meia', $this->data_pagamento_corretor_meia, true);
        $criteria->compare('valor_comissao_corretor', $this->valor_comissao_corretor);
        $criteria->compare('adm_vendas_pago', $this->adm_vendas_pago);
        $criteria->compare('data_aprovacao_financiamento', $this->data_aprovacao_financiamento, true);
        $criteria->compare('data_pagamento_adm_vendas', $this->data_pagamento_adm_vendas, true);
        $criteria->compare('valor_pagamento_adm_vendas', $this->valor_pagamento_adm_vendas);
        $criteria->compare('valor_venda', $this->valor_venda, true);
        $criteria->compare('valor_entrada', $this->valor_entrada);
        $criteria->compare('valor_financiado_construtora', $this->valor_financiado_construtora);
        $criteria->compare('valor_financiado_caixa', $this->valor_financiado_caixa);
        $criteria->compare('cliente_nome', $this->cliente_nome, true);
        $criteria->compare('cliente_cpf', $this->cliente_cpf, true);
        $criteria->compare('ativo', $this->ativo);

        if (!Yii::app()->user->isMaster() && !Yii::app()->user->isAdmin() && $this->imobiliaria != null) {
            $criteria->with = array('usuario0', 'imobiliaria0');

            $criteria->together = true;

            $criteria->compare('imobiliaria0.id', $this->imobiliaria, true);

            return new CActiveDataProvider($this, array(
                'criteria' => $criteria,
                'sort' => array(
                    'defaultOrder' => 'apartamento ASC',
                ),
                'pagination' => array(
                    'pageSize' => 400,
                ),
            ));
        } else {
            $criteria->join = 'LEFT OUTER JOIN apartamento as apartamento0 ON apartamento0.id = t.apartamento';
            $criteria->join .= ' LEFT OUTER JOIN bloco as bloco0 ON bloco0.id = apartamento0.bloco';
            $criteria->join .= ' LEFT OUTER JOIN empreendimento as empreendimento0 ON empreendimento0.id = bloco0.empreendimento';
            $criteria->join .= ' LEFT OUTER JOIN usuario as usuario0 ON usuario0.id = t.usuario';
            $criteria->join .= ' LEFT OUTER JOIN imobiliaria as imobiliaria0 ON imobiliaria0.id = usuario0.imobiliaria';

            $criteria->compare('bloco0.id', $this->bloco, true);
            $criteria->compare('empreendimento0.id', $this->empreendimento, true);
            $criteria->compare('imobiliaria0.id', $this->imobiliaria, true);

            return new CActiveDataProvider($this, array(
                'criteria' => $criteria,
                'sort' => array(
                    'defaultOrder' => 'bloco, apartamento ASC',
                ),
                'pagination' => array(
                    'pageSize' => 400,
                ),
            ));
        }
    }

}
