<?php

/**
 * This is the model base class for the table "recibo".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Recibo".
 *
 * Columns in table "recibo" available as properties of the model,
 * followed by relations of table "recibo" available as properties of the model.
 *
 * @property integer $id
 * @property integer $empreiteiro
 * @property string $data
 * @property string $data_inicial
 * @property string $data_final
 * @property integer $usuario
 * @property integer $empreendimento
 * @property integer $ativo
 *
 * @property HistoricoAtividade[] $historicoAtividades
 * @property Usuario $usuario0
 * @property Empreendimento $empreendimento0
 * @property Usuario $empreiteiro0
 * @property Retencao[] $retencaos
 */
abstract class BaseRecibo extends GxActiveRecord {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'recibo';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Recibo|Recibos', $n);
    }

    public static function representingColumn() {
        return 'data';
    }

    public function rules() {
        return array(
            array('empreiteiro, usuario, empreendimento, ativo', 'required'),
            array('empreiteiro, usuario, empreendimento, ativo', 'numerical', 'integerOnly' => true),
            array('data_inicial, data_final', 'safe'),
            array('data_inicial, data_final', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, empreiteiro, data, data_inicial, data_final, usuario, empreendimento, ativo', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'historicoAtividades' => array(self::HAS_MANY, 'HistoricoAtividade', 'recibo'),
            'usuario0' => array(self::BELONGS_TO, 'Usuario', 'usuario'),
            'empreiteiro0' => array(self::BELONGS_TO, 'Usuario', 'empreiteiro'),
            'retencaos' => array(self::HAS_MANY, 'Retencao', 'recibo'),
            'atividade0' => array(self::HAS_MANY, 'Atividade', array('atividade' => 'id'), 'through' => 'historicoAtividades'),
//            'empreendimento0' => array(self::HAS_MANY, 'Empreendimento', array('empreendimento' => 'id'), 'through' => 'atividade0'),
            'empreendimento0' => array(self::BELONGS_TO, 'Empreendimento', 'empreendimento'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'empreiteiro' => Yii::t('app', 'Empreiteiro'),
            'data' => Yii::t('app', 'Data'),
            'data_inicial' => Yii::t('app', 'Data Inicial'),
            'data_final' => Yii::t('app', 'Data Final'),
            'usuario' => Yii::t('app', 'UsuÃ¡rio'),
            'empreendimento' => Yii::t('app', 'Empreendimento'),
            'ativo' => Yii::t('app', 'Ativo'),
            'historicoAtividades' => null,
            'usuario0' => null,
            'empreiteiro0' => null,
            'retencaos' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('t.empreiteiro', $this->empreiteiro);
        $criteria->compare('data', $this->data, true);
        $criteria->compare('data_inicial', $this->data_inicial, true);
        $criteria->compare('data_final', $this->data_final, true);
        $criteria->compare('usuario', $this->usuario);
        $criteria->compare('t.empreendimento', $this->empreendimento);
        $criteria->compare('t.ativo', 1);

        $criteria->join .= ' LEFT OUTER JOIN historico_atividade as ha ON ha.recibo = t.id';
        $criteria->join .= ' LEFT OUTER JOIN atividade as atividade0 ON atividade0.id = ha.atividade';
        $criteria->join .= ' LEFT OUTER JOIN unidade_medida as unidadeMedida0 ON unidadeMedida0.id = atividade0.unidade_medida';
        $criteria->join .= ' LEFT OUTER JOIN empreendimento as empreendimento0 ON empreendimento0.id = unidadeMedida0.empreendimento';
        $criteria->join .= ' INNER JOIN usuario as empreiteiro0 ON empreiteiro0.id = t.empreiteiro AND empreiteiro0.ativo = 1';
        
        $criteria->distinct = true;

        $criteria->compare('empreendimento0.id', $this->empreendimento, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

}
